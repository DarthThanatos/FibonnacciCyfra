// megafunction wizard: %ALTSQRT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altsqrt 

// ============================================================
// File Name: sqrt.v
// Megafunction Name(s):
// 			altsqrt
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 4.1 Build 208 09/10/2004 SP 2 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2004 Altera Corporation
//Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
//support information,  device programming or simulation file,  and any other
//associated  documentation or information  provided by  Altera  or a partner
//under  Altera's   Megafunction   Partnership   Program  may  be  used  only
//to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
//other  use  of such  megafunction  design,  netlist,  support  information,
//device programming or simulation file,  or any other  related documentation
//or information  is prohibited  for  any  other purpose,  including, but not
//limited to  modification,  reverse engineering,  de-compiling, or use  with
//any other  silicon devices,  unless such use is  explicitly  licensed under
//a separate agreement with  Altera  or a megafunction partner.  Title to the
//intellectual property,  including patents,  copyrights,  trademarks,  trade
//secrets,  or maskworks,  embodied in any such megafunction design, netlist,
//support  information,  device programming or simulation file,  or any other
//related documentation or information provided by  Altera  or a megafunction
//partner, remains with Altera, the megafunction partner, or their respective
//licensors. No other licenses, including any licenses needed under any third
//party's intellectual property, are provided herein.


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module sqrt (
	radical,
	q,
	remainder);

	input	[7:0]  radical;
	output	[3:0]  q;
	output	[4:0]  remainder;

	wire [4:0] sub_wire0;
	wire [3:0] sub_wire1;
	wire [4:0] remainder = sub_wire0[4:0];
	wire [3:0] q = sub_wire1[3:0];

	altsqrt	altsqrt_component (
				.radical (radical),
				.remainder (sub_wire0),
				.q (sub_wire1)
				// synopsys translate_off
				,
				.ena (),
				.clk (),
				.aclr ()
				// synopsys translate_on
				);
	defparam
		altsqrt_component.width = 8,
		altsqrt_component.pipeline = 0,
		altsqrt_component.q_port_width = 4,
		altsqrt_component.r_port_width = 5;


endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: CONSTANT: WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "0"
// Retrieval info: CONSTANT: Q_PORT_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: R_PORT_WIDTH NUMERIC "5"
// Retrieval info: USED_PORT: radical 0 0 8 0 INPUT NODEFVAL radical[7..0]
// Retrieval info: USED_PORT: q 0 0 4 0 OUTPUT NODEFVAL q[3..0]
// Retrieval info: USED_PORT: remainder 0 0 5 0 OUTPUT NODEFVAL remainder[4..0]
// Retrieval info: CONNECT: @radical 0 0 8 0 radical 0 0 8 0
// Retrieval info: CONNECT: q 0 0 4 0 @q 0 0 4 0
// Retrieval info: CONNECT: remainder 0 0 5 0 @remainder 0 0 5 0
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL sqrt_bb.v TRUE
